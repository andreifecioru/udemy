DROP TABLE IF EXISTS photo_tags;
DROP TABLE IF EXISTS caption_tags;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS hashtags_posts;
DROP TABLE IF EXISTS followers;
DROP TABLE IF EXISTS hashtags;
DROP TABLE IF EXISTS "comments";
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS users;

-- DDL statements

CREATE TABLE IF NOT EXISTS users(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	username VARCHAR(30) NOT NULL UNIQUE,
	bio VARCHAR(400),
	avatar VARCHAR(200),
	phone VARCHAR(25),
	email VARCHAR(50),
	"password" VARCHAR(50),
	status VARCHAR(15),
	
	-- exclusivity constraint
	CHECK(COALESCE(phone, email) IS NOT NULL)	
);

CREATE TABLE IF NOT EXISTS posts(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	url VARCHAR(200) NOT NULL,
	caption VARCHAR(240),
	
	lat REAL CHECK(lat IS NULL OR (lat >= -90 AND lat <= 90)),
	lng REAL CHECK(lng IS NULL OR (lng >= -180 AND lng <=180)),
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS photo_tags(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	x INTEGER NOT NULL CHECK(x >= 0),
	y INTEGER NOT NULL CHECK(y >= 0),
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	
	UNIQUE(user_id, post_id)
);

CREATE TABLE IF NOT EXISTS caption_tags(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,

	UNIQUE(user_id, post_id)
);

CREATE TABLE IF NOT EXISTS "comments"(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	contents VARCHAR(240) NOT NULL,
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS likes(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	
	-- we can't use the NOT NULL constraint here due to (polymorphic asscociation)
	post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
	comment_id INTEGER REFERENCES "comments"(id) ON DELETE CASCADE,
	
	-- exclusivity constraint (polymorphic asscociation)
	CHECK(
	  (
		  COALESCE((post_id)::BOOLEAN::INTEGER, 0) +
		  COALESCE((comment_id)::BOOLEAN::INTEGER, 0)
		) = 1
	),
	
	UNIQUE(user_id, post_id, comment_id)
);

CREATE TABLE IF NOT EXISTS hashtags(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	title VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS hashtags_posts(
	id SERIAL PRIMARY KEY,
	
	hashtag_id INTEGER NOT NULL REFERENCES hashtags(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	
	UNIQUE(hashtag_id, post_id)
);

CREATE TABLE IF NOT EXISTS followers(
	id SERIAL PRIMARY KEY,
	
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	
	leader_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	follower_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	
	UNIQUE(leader_id, follower_id),
	CHECK(leader_id != follower_id)
);






